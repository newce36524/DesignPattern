代理模式是结构型设计模式，他提供了对目标对象行为的包装，把类的行为交给代理类型来完成，这么做的好处是，如果类的行为完成后，
希望执行一些额外的方法，可以通过代理类来完成，在不破坏原始类型行为封装的前提下，为方法额外执行一些行为，比如日志打印，
异常处理，参数校验，延迟加载（比如延迟原始类的实例化，只在调用时实例化）等等，代理模式实现了AOP思想，但是代理的限制是，
代理的行为必须要和原始类型一致，并且需要多维护一个代理类。

设计模式解决了一些问题，往往又会引进新的问题，并且依赖于使用场景，所以设计模式也不是万能的。